const express = require('express');
const router = express.Router(); // allows us to create modular route handler

const auth = require("../middleware/auth");
const getCocktail = require("../middleware/getCocktail");
// Cocktail schema and model
const Cocktail = require('../models/Cocktail')

// List all cocktails
router.get('/', auth, async (req, res) => {
  try {
    const cocktails = await Cocktail.find({ owner: req.user.id })
    res.json(cocktails)
  } catch (err) {
    res.status(500).json({ message: err.message })
  }
});

// Create new cocktail
router.post('/', auth, async (req, res) => {
  const cocktail = new Cocktail(req.body);

  // sets owner from id generated by auth middleware
  cocktail.owner = req.user.id;
  try {
    const newCocktail = await cocktail.save()
    res.status(201).json(newCocktail)
  } catch (err) {
    res.status(400).json({ message: err.message })
  }
});

// Get one cocktail
router.get('/:id', auth, getCocktail, (req, res) => {
  res.json(res.cocktail)
});

// edit cocktail
router.patch('/:id', auth, getCocktail, async (req, res) => {
  if (req.body.name != null) { res.cocktail.name = req.body.name }
  if (req.body.glass != null) { res.cocktail.glass = req.body.glass }
  if (req.body.category != null) { res.cocktail.category = req.body.category }
  if (req.body.ingredients != null) { res.cocktail.ingredients = req.body.ingredients }
  if (req.body.garnish != null) { res.cocktail.garnish = req.body.garnish }
  if (req.body.preparation != null) { res.cocktail.preparation = req.body.preparation }
  if (req.body.source != null) { res.cocktail.source = req.body.source }
  res.cocktail.edited = Date.now();

  try {
    const updatedCocktail = await res.cocktail.save();
    res.json(updatedCocktail);
  } catch (err) {
    res.status(400).json({ message: err.message })
  }
})

// Delete a cocktail
router.delete('/:id', auth, getCocktail, async (req, res) => {
  try {
    await res.cocktail.remove()
    res.json({ message: 'Deleted Cocktail' })
  } catch (err) {
    res.status(500).json({ message: err.message })
  }
});

// Delete all cocktails
router.delete('/', auth, async (req, res) => {
	try {
		const deleted = await Cocktail.deleteMany({ owner: req.user.id });
		res.json(deleted);
	} catch (err) {
		res.status(500).json({ message: err.message })
	}
})

module.exports = router;